-- V1.0a AR
-- 30.12.2016 11:58:19 AR V1.0b
-- 21.05.2017 10:52:23 AR V1.0c
-- 21.02.2018 08:29:06 AR V1.0d Bug fix

generic = {
  parameter = {
    initalValue = 0.0,
    delayS = 1.0
  },

  init = function(self)
    block.setInputsPinCount(1)
    block.setOutputsPinCount(1)
    block.modifyFlags('BreakAlgebraLoop', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Transport Delay', [[
The Transport Delay block delays the input to
the output by a specified amount of time
]])
    gui.add('Edit', 'EditInitalValue', 'Inital value')
    gui.add('Edit', 'EditDelay', 'Delay [s]')
    gui.set('EditInitalValue', 'Number', self.parameter.initalValue)
    gui.set('EditDelay', 'Number', self.parameter.delayS)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.initalValue = gui.get('EditInitalValue', 'Number')
    self.parameter.delay = gui.get('EditDelay', 'Number')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x50, "", [[
      --draw.line(px(20), py(80), px(90), py(80))
      --draw.line(px(30), py(20), px(30), py(90))
      --draw.line(px(30), py(50), px(90), py(50))
      draw.setColorA(0.7, 0.7, 0.7)
      do
        local p = {}
        for i = 0, 60, 0.1 do
          p[#p + 1] = px(10 + i)
          p[#p + 1] = py(50 - math.sin(i / 15 * math.pi) * 30)
        end
        draw.line(table.unpack(p))
      end
      draw.setColorA(0, 0, 0)
      do
        local p = {px(10), py(50)}
        for i = 0, 60, 0.1 do
          p[#p + 1] = px(30 + i)
          p[#p + 1] = py(50 - math.sin(i / 15 * math.pi) * 30)
        end
        draw.line(table.unpack(p))
      end
    ]])
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.start = function()
          block.n = DELAY / sim.stepRateS
          block.q = {}
          for i = 1, block.n do
            block.q[i] = INITALVALUE
          end
        end

        block.stepFirst = function()
          return block.q[block.n]
        end

        block.stepLast = function(a)
          assert(block.parent.ellapsedS == sim.stepRateS, 'Transport Delay don\'t work for enabled or subsample subsystems')
          for i = block.n, 2, -1  do
            block.q[i] = block.q[i - 1]
          end
          block.q[1] = a
        end

      return block
      ]==]
    local replaces = {
      ['INITALVALUE'] = self.parameter.initalValue,
      ['DELAY'] = self.parameter.delayS
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

