-- V1.0a AR
-- 30.12.2016 11:58:19 AR V1.0b
-- 21.05.2017 10:52:23 AR V1.0c
-- 23.04.2018 17:09:52 AR V1.0d Datatype to 'nil', 'boolean', 'number', 'string', 'table'
-- 21.02.2019 08:57:19 AR V1.0e Use deep copy at table unit delay
-- 28.02.2019 09:23:08 AR V1.0f Deep copy only if nessesary. Prevent fail on missing 'MessagePack' library

generic = {
  parameter = {
    initalValue = 0.0,
  },

  init = function(self)
    block.setInputsPinCount(1)
    block.setInputPinTypeRestrains(1, 'nil', 'boolean', 'number', 'string', 'table')
    block.setOutputsPinCount(1)
    block.setOutputPinTypeRestrains(1, 'nil', 'boolean', 'number', 'string', 'table')
    block.modifyFlags('BreakAlgebraLoop', true)
    block.modifyFlags('SupressStopFunctionCall', true)
  end,

  open = function(self)
    gui.add('Info', 'Info', 'Unit Delay', 'Delay signal one sample period')
    gui.add('Edit', 'EditInitalValue', 'Inital value')
    gui.set('EditInitalValue', 'Text', self.parameter.initalValue)
    gui.setSize()
  end,

  apply = function(self)
    self.parameter.initalValue = gui.get('EditInitalValue', 'Text')
  end,

  close = function()
  end,

  avatar = function(self)
    return block.getDefaultAvatar(0x50, "'1\\n\\xE2\\x80\\x95\\xE2\\x80\\x95\\nz'")
  end,

  generate = function(self)
    local source =
      [==[
        local block = {}

        block.start = function()
          block.a = INITALVALUE
          local ok, mp = pcall(require, 'messagePack')
          if ok then
            block.mp = mp
          end
        end

        block.stepFirst = function()
          return block.a
        end

        block.stepLast = function(a)
          if type(a) == 'table' then
            block.a = block.mp.unpack(block.mp.pack(a))
          else
            block.a = a
          end
        end

      return block
      ]==]
    local replaces = {
      ['INITALVALUE'] = self.parameter.initalValue
    }
    return string.gsub(source, '%a+', replaces)
  end,

}

